# coding: utf-8
# # This template file is fetched from openapi-generator and modified
# # Run `openapi-generator-cli author template -g python-nextgen -o outputfolder`
# # to get all template files, make the required modifications. If a template is 
# # missing it will fallback to the default template.

"""
    Sensorbucket API

    SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex   # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: info@pollex.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings
import urllib

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import Generator 

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

from typing import Optional, Union

from openapi_client.models.create_pipeline200_response import CreatePipeline200Response
from openapi_client.models.create_pipeline_request import CreatePipelineRequest
from openapi_client.models.disable_pipeline200_response import DisablePipeline200Response
from openapi_client.models.get_pipeline200_response import GetPipeline200Response
from openapi_client.models.list_pipelines200_response import ListPipelines200Response
from openapi_client.models.update_pipeline200_response import UpdatePipeline200Response
from openapi_client.models.update_pipeline_request import UpdatePipelineRequest

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)

class PipelinesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    

    @validate_arguments
    def create_pipeline(self, create_pipeline_request : Optional[CreatePipelineRequest] = None, **kwargs) -> CreatePipeline200Response:  # noqa: E501
        """Create pipeline  # noqa: E501

        Create a new pipeline.   A pipeline determines which workers, in which order the incoming data will be processed by.  A pipeline step is used as routing key in the Message Queue. This might be changed in future releases.  **Note:** currently there are no validations in place on whether a worker for the provided step actually exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline(create_pipeline_request, async_req=True)
        >>> result = thread.get()

        :param create_pipeline_request:
        :type create_pipeline_request: CreatePipelineRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatePipeline200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_pipeline_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_pipeline_with_http_info(create_pipeline_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_pipeline_with_http_info(self, create_pipeline_request : Optional[CreatePipelineRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create pipeline  # noqa: E501

        Create a new pipeline.   A pipeline determines which workers, in which order the incoming data will be processed by.  A pipeline step is used as routing key in the Message Queue. This might be changed in future releases.  **Note:** currently there are no validations in place on whether a worker for the provided step actually exists.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline_with_http_info(create_pipeline_request, async_req=True)
        >>> result = thread.get()

        :param create_pipeline_request:
        :type create_pipeline_request: CreatePipelineRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatePipeline200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_pipeline_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_pipeline_request'] is not None:
            _body_params = _params['create_pipeline_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreatePipeline200Response",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/pipelines', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    

    @validate_arguments
    def disable_pipeline(self, id : Annotated[StrictStr, Field(..., description="The UUID of the pipeline")], **kwargs) -> DisablePipeline200Response:  # noqa: E501
        """Disable pipeline  # noqa: E501

        Disables a pipeline by setting its status to inactive.  Inactive pipelines will - by default - not appear in the `ListPipelines` and `GetPipeline` endpoints, unless the `status=inactive` query parameter is given on that endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disable_pipeline(id, async_req=True)
        >>> result = thread.get()

        :param id: The UUID of the pipeline (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DisablePipeline200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the disable_pipeline_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.disable_pipeline_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def disable_pipeline_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The UUID of the pipeline")], **kwargs) -> ApiResponse:  # noqa: E501
        """Disable pipeline  # noqa: E501

        Disables a pipeline by setting its status to inactive.  Inactive pipelines will - by default - not appear in the `ListPipelines` and `GetPipeline` endpoints, unless the `status=inactive` query parameter is given on that endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disable_pipeline_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The UUID of the pipeline (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DisablePipeline200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_pipeline" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "DisablePipeline200Response",
            '401': None,
            '403': None,
            '404': None,
            '405': None,
        }

        return self.api_client.call_api(
            '/pipelines/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    

    @validate_arguments
    def get_pipeline(self, id : Annotated[StrictStr, Field(..., description="The UUID of the pipeline")], status : Annotated[Optional[conlist(StrictStr)], Field(description="The status of the pipeline. Use `inactive` to view inactive pipelines instead of getting a 404 error ")] = None, **kwargs) -> GetPipeline200Response:  # noqa: E501
        """Get pipeline  # noqa: E501

        Get the pipeline with the given identifier.  This endpoint by default returns a 404 Not Found for inactive pipelines. To get an inactive pipeline, provide the `status=inactive` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline(id, status, async_req=True)
        >>> result = thread.get()

        :param id: The UUID of the pipeline (required)
        :type id: str
        :param status: The status of the pipeline. Use `inactive` to view inactive pipelines instead of getting a 404 error 
        :type status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetPipeline200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_pipeline_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_pipeline_with_http_info(id, status, **kwargs)  # noqa: E501

    @validate_arguments
    def get_pipeline_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The UUID of the pipeline")], status : Annotated[Optional[conlist(StrictStr)], Field(description="The status of the pipeline. Use `inactive` to view inactive pipelines instead of getting a 404 error ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get pipeline  # noqa: E501

        Get the pipeline with the given identifier.  This endpoint by default returns a 404 Not Found for inactive pipelines. To get an inactive pipeline, provide the `status=inactive` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_with_http_info(id, status, async_req=True)
        >>> result = thread.get()

        :param id: The UUID of the pipeline (required)
        :type id: str
        :param status: The status of the pipeline. Use `inactive` to view inactive pipelines instead of getting a 404 error 
        :type status: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetPipeline200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'status'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))
            _collection_formats['status'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetPipeline200Response",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/pipelines/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    
    @validate_arguments
    def list_pipelines_gen(self, inactive : Annotated[Optional[StrictBool], Field(description="Only show inactive pipelines")] = None, step : Annotated[Optional[conlist(StrictStr)], Field(description="Only show pipelines that include at least one of these steps")] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> Generator[ListPipelines200Response, None, None]:  # noqa: E501
        """List pipelines  # noqa: E501
        This method wraps the API pagination logic and returns an generator which at each iteration fetches a new page.

        List pipelines. By default only `state=active` pipelines are returned. By providing the query parameter `inactive` only the inactive pipelines will be returned.  Pipelines can be filtered by providing one or more `step`s. This query parameter can be repeated to include more steps. When multiple steps are given, pipelines containing one of the given steps will be returned.   # noqa: E501

        :param inactive: Only show inactive pipelines
        :type inactive: bool
        :param step: Only show pipelines that include at least one of these steps
        :type step: List[str]
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :rtype: Generator[ListPipelines200Response]
        """
        result = self.list_pipelines(inactive=inactive,step=step,cursor=cursor,limit=limit,)
        yield result
        while result.links.next != "":
            cursor = urllib.parse.parse_qs(urllib.parse.urlparse(result.links.next).query)['cursor'][0]
            result = self.list_pipelines(inactive = inactive,step = step,cursor = cursor,limit = limit,)
            yield result

    @validate_arguments
    def list_pipelines(self, inactive : Annotated[Optional[StrictBool], Field(description="Only show inactive pipelines")] = None, step : Annotated[Optional[conlist(StrictStr)], Field(description="Only show pipelines that include at least one of these steps")] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> ListPipelines200Response:  # noqa: E501
        """List pipelines  # noqa: E501

        List pipelines. By default only `state=active` pipelines are returned. By providing the query parameter `inactive` only the inactive pipelines will be returned.  Pipelines can be filtered by providing one or more `step`s. This query parameter can be repeated to include more steps. When multiple steps are given, pipelines containing one of the given steps will be returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_pipelines(inactive, step, cursor, limit, async_req=True)
        >>> result = thread.get()

        :param inactive: Only show inactive pipelines
        :type inactive: bool
        :param step: Only show pipelines that include at least one of these steps
        :type step: List[str]
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListPipelines200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_pipelines_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_pipelines_with_http_info(inactive, step, cursor, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def list_pipelines_with_http_info(self, inactive : Annotated[Optional[StrictBool], Field(description="Only show inactive pipelines")] = None, step : Annotated[Optional[conlist(StrictStr)], Field(description="Only show pipelines that include at least one of these steps")] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List pipelines  # noqa: E501

        List pipelines. By default only `state=active` pipelines are returned. By providing the query parameter `inactive` only the inactive pipelines will be returned.  Pipelines can be filtered by providing one or more `step`s. This query parameter can be repeated to include more steps. When multiple steps are given, pipelines containing one of the given steps will be returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_pipelines_with_http_info(inactive, step, cursor, limit, async_req=True)
        >>> result = thread.get()

        :param inactive: Only show inactive pipelines
        :type inactive: bool
        :param step: Only show pipelines that include at least one of these steps
        :type step: List[str]
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListPipelines200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'inactive',
            'step',
            'cursor',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pipelines" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('inactive') is not None:  # noqa: E501
            _query_params.append(('inactive', _params['inactive']))

        if _params.get('step') is not None:  # noqa: E501
            _query_params.append(('step', _params['step']))
            _collection_formats['step'] = 'csv'

        if _params.get('cursor') is not None:  # noqa: E501
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListPipelines200Response",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/pipelines', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    

    @validate_arguments
    def update_pipeline(self, id : Annotated[StrictStr, Field(..., description="The UUID of the pipeline")], update_pipeline_request : Optional[UpdatePipelineRequest] = None, **kwargs) -> UpdatePipeline200Response:  # noqa: E501
        """Update pipeline  # noqa: E501

        Update some properties of the pipeline with the given identifier.   Setting an invalid state or making an invalid state transition will result in an error.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pipeline(id, update_pipeline_request, async_req=True)
        >>> result = thread.get()

        :param id: The UUID of the pipeline (required)
        :type id: str
        :param update_pipeline_request:
        :type update_pipeline_request: UpdatePipelineRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdatePipeline200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_pipeline_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_pipeline_with_http_info(id, update_pipeline_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_pipeline_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The UUID of the pipeline")], update_pipeline_request : Optional[UpdatePipelineRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update pipeline  # noqa: E501

        Update some properties of the pipeline with the given identifier.   Setting an invalid state or making an invalid state transition will result in an error.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pipeline_with_http_info(id, update_pipeline_request, async_req=True)
        >>> result = thread.get()

        :param id: The UUID of the pipeline (required)
        :type id: str
        :param update_pipeline_request:
        :type update_pipeline_request: UpdatePipelineRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdatePipeline200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'update_pipeline_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pipeline" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_pipeline_request'] is not None:
            _body_params = _params['update_pipeline_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "UpdatePipeline200Response",
            '401': None,
            '403': None,
            '404': None,
            '405': None,
        }

        return self.api_client.call_api(
            '/pipelines/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

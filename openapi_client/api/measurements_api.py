# coding: utf-8
# # This template file is fetched from openapi-generator and modified
# # Run `openapi-generator-cli author template -g python-nextgen -o outputfolder`
# # to get all template files, make the required modifications. If a template is 
# # missing it will fallback to the default template.

"""
    Sensorbucket API

    SensorBucket processes data from different sources and devices into a single standardized format.  An applications connected to SensorBucket, can use all devices SensorBucket supports.  Missing a device or source? SensorBucket is designed to be scalable and extendable. Create your own worker that receives data from an AMQP source, process said data and output in the expected worker output format.  Find out more at: https://developer.sensorbucket.nl/  Developed and designed by Provincie Zeeland and Pollex   # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: info@pollex.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings
import urllib

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import Generator 

from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from openapi_client.models.list_datastreams200_response import ListDatastreams200Response
from openapi_client.models.query_measurements200_response import QueryMeasurements200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)

class MeasurementsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    
    @validate_arguments
    def list_datastreams_gen(self, sensor : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="only return datastreams that are produced by the given sensor identifier")] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> Generator[ListDatastreams200Response, None, None]:  # noqa: E501
        """List all datastreams  # noqa: E501
        This method wraps the API pagination logic and returns an generator which at each iteration fetches a new page.

        List all datastreams.  A sensor can produce one or more timeseries of measurements. Such a unique timeserie is called a datastream.    **For example:** A Particulate Matter sensor might return count the number of particles smaller than 2.5 μg/cm2, 5 μg/cm2 and 10 μg/cm2. this is one sensor producing three datastreams.  Another example would be a worker which processes raw incoming values into meaningful data. An underwater pressure sensor might supply its measurement in milli Amperes, but the worker converts it to watercolumn in meters. The sensor now has two datastreams. Presusre in millivolt and watercolumn in meters.   # noqa: E501

        :param sensor: only return datastreams that are produced by the given sensor identifier
        :type sensor: float
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :rtype: Generator[ListDatastreams200Response]
        """
        result = self.list_datastreams(sensor=sensor,cursor=cursor,limit=limit,)
        yield result
        while result.links.next != "":
            cursor = urllib.parse.parse_qs(urllib.parse.urlparse(result.links.next).query)['cursor'][0]
            result = self.list_datastreams(sensor = sensor,cursor = cursor,limit = limit,)
            yield result

    @validate_arguments
    def list_datastreams(self, sensor : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="only return datastreams that are produced by the given sensor identifier")] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> ListDatastreams200Response:  # noqa: E501
        """List all datastreams  # noqa: E501

        List all datastreams.  A sensor can produce one or more timeseries of measurements. Such a unique timeserie is called a datastream.    **For example:** A Particulate Matter sensor might return count the number of particles smaller than 2.5 μg/cm2, 5 μg/cm2 and 10 μg/cm2. this is one sensor producing three datastreams.  Another example would be a worker which processes raw incoming values into meaningful data. An underwater pressure sensor might supply its measurement in milli Amperes, but the worker converts it to watercolumn in meters. The sensor now has two datastreams. Presusre in millivolt and watercolumn in meters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_datastreams(sensor, cursor, limit, async_req=True)
        >>> result = thread.get()

        :param sensor: only return datastreams that are produced by the given sensor identifier
        :type sensor: float
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListDatastreams200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_datastreams_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_datastreams_with_http_info(sensor, cursor, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def list_datastreams_with_http_info(self, sensor : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="only return datastreams that are produced by the given sensor identifier")] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all datastreams  # noqa: E501

        List all datastreams.  A sensor can produce one or more timeseries of measurements. Such a unique timeserie is called a datastream.    **For example:** A Particulate Matter sensor might return count the number of particles smaller than 2.5 μg/cm2, 5 μg/cm2 and 10 μg/cm2. this is one sensor producing three datastreams.  Another example would be a worker which processes raw incoming values into meaningful data. An underwater pressure sensor might supply its measurement in milli Amperes, but the worker converts it to watercolumn in meters. The sensor now has two datastreams. Presusre in millivolt and watercolumn in meters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_datastreams_with_http_info(sensor, cursor, limit, async_req=True)
        >>> result = thread.get()

        :param sensor: only return datastreams that are produced by the given sensor identifier
        :type sensor: float
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListDatastreams200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'sensor',
            'cursor',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_datastreams" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('sensor') is not None:  # noqa: E501
            _query_params.append(('sensor', _params['sensor']))

        if _params.get('cursor') is not None:  # noqa: E501
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListDatastreams200Response",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/datastreams', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    
    @validate_arguments
    def query_measurements_gen(self, start : StrictStr, end : StrictStr, device_id : Optional[StrictStr] = None, datastream : Optional[StrictStr] = None, sensor_code : Optional[StrictStr] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> Generator[QueryMeasurements200Response, None, None]:  # noqa: E501
        """Query measurements  # noqa: E501
        This method wraps the API pagination logic and returns an generator which at each iteration fetches a new page.

        Query a list of measurements.  This endpoint is used to get all measurements that correspond with the given filters.  It is commonly required to get a single stream of measurements from a single sensor. This can be accomplished by  finding the corresponding datastream ID and using that in the `datastream` filter.   Most query parameters can be repeated to get an OR combination of filters. For example, providing the `datastream`  parameter twice will return measurements for either datastreams.   # noqa: E501

        :param start: (required)
        :type start: str
        :param end: (required)
        :type end: str
        :param device_id:
        :type device_id: str
        :param datastream:
        :type datastream: str
        :param sensor_code:
        :type sensor_code: str
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :rtype: Generator[QueryMeasurements200Response]
        """
        result = self.query_measurements(start=start,end=end,device_id=device_id,datastream=datastream,sensor_code=sensor_code,cursor=cursor,limit=limit,)
        yield result
        while result.links.next != "":
            cursor = urllib.parse.parse_qs(urllib.parse.urlparse(result.links.next).query)['cursor'][0]
            result = self.query_measurements(start = start,end = end,device_id = device_id,datastream = datastream,sensor_code = sensor_code,cursor = cursor,limit = limit,)
            yield result

    @validate_arguments
    def query_measurements(self, start : StrictStr, end : StrictStr, device_id : Optional[StrictStr] = None, datastream : Optional[StrictStr] = None, sensor_code : Optional[StrictStr] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> QueryMeasurements200Response:  # noqa: E501
        """Query measurements  # noqa: E501

        Query a list of measurements.  This endpoint is used to get all measurements that correspond with the given filters.  It is commonly required to get a single stream of measurements from a single sensor. This can be accomplished by  finding the corresponding datastream ID and using that in the `datastream` filter.   Most query parameters can be repeated to get an OR combination of filters. For example, providing the `datastream`  parameter twice will return measurements for either datastreams.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_measurements(start, end, device_id, datastream, sensor_code, cursor, limit, async_req=True)
        >>> result = thread.get()

        :param start: (required)
        :type start: str
        :param end: (required)
        :type end: str
        :param device_id:
        :type device_id: str
        :param datastream:
        :type datastream: str
        :param sensor_code:
        :type sensor_code: str
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QueryMeasurements200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the query_measurements_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.query_measurements_with_http_info(start, end, device_id, datastream, sensor_code, cursor, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def query_measurements_with_http_info(self, start : StrictStr, end : StrictStr, device_id : Optional[StrictStr] = None, datastream : Optional[StrictStr] = None, sensor_code : Optional[StrictStr] = None, cursor : Annotated[Optional[StrictStr], Field(description="The cursor for the current page")] = None, limit : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Query measurements  # noqa: E501

        Query a list of measurements.  This endpoint is used to get all measurements that correspond with the given filters.  It is commonly required to get a single stream of measurements from a single sensor. This can be accomplished by  finding the corresponding datastream ID and using that in the `datastream` filter.   Most query parameters can be repeated to get an OR combination of filters. For example, providing the `datastream`  parameter twice will return measurements for either datastreams.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_measurements_with_http_info(start, end, device_id, datastream, sensor_code, cursor, limit, async_req=True)
        >>> result = thread.get()

        :param start: (required)
        :type start: str
        :param end: (required)
        :type end: str
        :param device_id:
        :type device_id: str
        :param datastream:
        :type datastream: str
        :param sensor_code:
        :type sensor_code: str
        :param cursor: The cursor for the current page
        :type cursor: str
        :param limit: The maximum amount of items per page. Not applicable if `cursor` parameter is given. System limits are in place. 
        :type limit: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QueryMeasurements200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'start',
            'end',
            'device_id',
            'datastream',
            'sensor_code',
            'cursor',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_measurements" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        if _params.get('end') is not None:  # noqa: E501
            _query_params.append(('end', _params['end']))

        if _params.get('device_id') is not None:  # noqa: E501
            _query_params.append(('device_id', _params['device_id']))

        if _params.get('datastream') is not None:  # noqa: E501
            _query_params.append(('datastream', _params['datastream']))

        if _params.get('sensor_code') is not None:  # noqa: E501
            _query_params.append(('sensor_code', _params['sensor_code']))

        if _params.get('cursor') is not None:  # noqa: E501
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "QueryMeasurements200Response",
            '401': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/measurements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
